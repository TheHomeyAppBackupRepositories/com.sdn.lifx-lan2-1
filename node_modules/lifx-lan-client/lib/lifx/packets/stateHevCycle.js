'use strict';

var _require = require('../../lifx'),
    utils = _require.utils;

var Packet = {
  size: 9
};

/**
 * Converts packet specific data from a buffer to an object
 * @param  {Buffer} buf Buffer containing only packet specific data no header
 * @return {Object}     Information contained in packet
 */
Packet.toObject = function (buf) {
  var obj = {};
  var offset = 0;

  if (buf.length !== this.size) {
    throw new Error('Invalid length given for stateHevState LIFX packet');
  }

  obj.duration = buf.readUInt32LE(offset);
  offset += 4;
  obj.remaining = buf.readUInt32LE(offset);
  offset += 4;
  obj.lastPower = buf.readUInt8(offset);
  offset += 1;

  return obj;
};

/**
 * Converts the given packet specific object into a packet
 * @param  {Object} obj object with configuration data
 * @return {Buffer}     packet
 */
Packet.toBuffer = function (obj) {
  var buf = Buffer.alloc(this.size);
  buf.fill(0);
  var offset = 0;

  buf.writeUInt32LE(obj.duration, offset);
  offset += 4;
  buf.writeUInt32LE(obj.remaining, offset);
  offset += 4;
  buf.writeUInt8(obj.lastPower, offset);
  offset += 1;

  return buf;
};

module.exports = Packet;